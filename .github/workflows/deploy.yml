name: Deploy Frontend Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment files
        run: |
          # Create frontend docker-compose file
          cat > docker-compose.frontend.yml << 'EOF'
          version: '3.8'
          
          services:
            frontend:
              image: ${{ env.DOCKER_USERNAME }}/frontend:latest
              expose:
                - '4173'
              environment:
                - NODE_ENV=production
                - VITE_API_URL=http://${{ secrets.VPS_HOST }}:3000
              command: ["npm", "run", "preview", "--", "--host", "0.0.0.0"]
              restart: unless-stopped
            
            nginx:
              image: nginx:stable-alpine
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx.conf:/etc/nginx/conf.d/default.conf
                - ./certbot/conf:/etc/letsencript
                - ./certbot/www:/var/www/certbot
              depends_on:
                - frontend
              restart: unless-stopped

          EOF

          # Create Nginx configuration file
          cat > nginx.conf << 'EOF'
          server {
              listen 80;
              listen [::]:80;
              
              location / {
                  proxy_pass http://frontend:4173;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  
                  # WebSocket support
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  
                  # Caching static files
                  location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                      proxy_pass http://frontend:4173;
                      expires 30d;
                      add_header Cache-Control "public, no-transform";
                  }
              }
          }
          EOF

      - name: Copy deployment files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "docker-compose.frontend.yml,nginx.conf"
          target: "~/app/homewatt-frontend/"

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            # Create application directory
            mkdir -p ~/app/homewatt-frontend
            mkdir -p ~/app/homewatt-frontend/certbot/conf
            mkdir -p ~/app/homewatt-frontend/certbot/www
            cd ~/app/homewatt-frontend

            # Stop existing services
            docker-compose -f docker-compose.frontend.yml down || true

            # Clean up old images
            docker system prune -f

            # Pull latest frontend image
            docker pull ${{ env.DOCKER_USERNAME }}/frontend:latest

            # Start services
            docker-compose -f docker-compose.frontend.yml up -d

            # Check service status
            docker-compose -f docker-compose.frontend.yml ps

  notify:
    needs: [deploy]
    runs-on: ubuntu-22.04
    if: always()
    
    steps:
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "Frontend deployment successful!"
          else
            echo "Frontend deployment failed!"
          fi